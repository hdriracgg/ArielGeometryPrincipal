/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cgg.arielgeometryroseviewer;

import com.cgg.arielgeometry.model.types.XYLocation;
import com.cgg.arielgeometry.model.types.EndCoordinateList;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.util.Collection;
import java.util.List;
import javax.swing.JScrollPane;
import javax.swing.RepaintManager;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.cgg.arielgeometryroseviewer//ArielGeometryRoseViewer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ArielGeometryRoseViewerTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "com.cgg.arielgeometryroseviewer.ArielGeometryRoseViewerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ArielGeometryRoseViewerAction",
        preferredID = "ArielGeometryRoseViewerTopComponent")
@Messages({
    "CTL_ArielGeometryRoseViewerAction=ArielGeometryRoseViewer",
    "CTL_ArielGeometryRoseViewerTopComponent=ArielGeometryRoseViewer Window",
    "HINT_ArielGeometryRoseViewerTopComponent=This is a ArielGeometryRoseViewer window"
})
public final class ArielGeometryRoseViewerTopComponent extends TopComponent implements LookupListener {

    private InstanceContent content;
    private org.openide.util.Lookup.Result<EndCoordinateList> result;
    private ArielGeometryBinXYPlot chartpanel;
    private CircularGridDisplay circularGridDisplay;
    private boolean debug = false;

    public ArielGeometryRoseViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_ArielGeometryRoseViewerTopComponent());
        setToolTipText(Bundle.HINT_ArielGeometryRoseViewerTopComponent());
        content = new InstanceContent();
        associateLookup(new AbstractLookup(content));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        if(debug) System.out.println("ArielGeometryRoseViewerTopComponent.componentOpened ArielGeometryRoseViewerTopComponent Opened");
        chartpanel = new ArielGeometryBinXYPlot("Plot title");
//        circularGridDisplay = new CircularGridDisplay(new CircularGrid(1000, 300.0f));
        this.setLayout(new GridLayout());
        JScrollPane scrollPane = new JScrollPane(chartpanel);
        this.add(scrollPane);
//        this.add(circularGridDisplay, BorderLayout.WEST);
        result = org.openide.util.Utilities.actionsGlobalContext().lookupResult(EndCoordinateList.class);
        result.addLookupListener(this);
        if(debug) System.out.println("ArielGeometryRoseViewerTopComponent.componentOpened Component opened: ArielGeometryRoseViewerTopComponent");
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    @Override
    protected void componentShowing() {
        super.componentShowing();
        System.out.println("ArielGeometryRoseViewerTopComponent Showing");
    }

    @Override
    protected void componentHidden() {
        super.componentHidden();
        System.out.println("ArielGeometryRoseViewerTopComponent Hidden");
    }
    
    @Override
    protected void componentActivated() {
        super.componentActivated();
        System.out.println("ArielGeometryRoseViewerTopComponent Activated");
        RepaintManager.currentManager(this).addInvalidComponent(this);
    }

    @Override
    protected void componentDeactivated() {
        super.componentDeactivated();
        System.out.println("ArielGeometryRoseViewerTopComponent Deactivated");
        RepaintManager.currentManager(this).addInvalidComponent(this);
    }
    
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        List<XYLocation> list;
        Collection<? extends EndCoordinateList> allcoords = result.allInstances();
        if(debug) System.out.println("ArielGeometryRoseViewerTopComponent.resultChanged In resultChanged of ArielGeometryRoseViewerTopComponent");
        for(EndCoordinateList endCoordinateList : allcoords) {
            chartpanel.drawmap(endCoordinateList);
//            circularGridDisplay.drawplot(endCoordinateList);
        }
        RepaintManager.currentManager(this).addInvalidComponent(this);
    }
}
